Use cSeqFile.pkg
Use cIterator_Mixin.pkg

//This class is an object-oriented approach to sequential reading from a file.
//A cSeqInputFile object handles channel delegation and release, and introduces
//the Iterator interface for reading the lines of the file sequentially.
//
//Open the file for input by calling the OpenInput function.
//Read lines from the file by calling IteratorMoveNext or ReadNextLine.
//Get the value of the current line from CurrentLine.
//The destructor will close the file if you do not call CloseFile explicitly.
Class cSeqInputFile is a cSeqFile
    Procedure Construct_Object
        Forward Send Construct_Object
        send Define_cIterator_Mixin // Constructor method

        { Visibility = Public }
        //Keep the file open (and keep the channel) until the file is closed?
        //Todo: Implement handling of pbKeepOpen
        Property Boolean pbKeepOpen True
        { Visibility = Private}
        //Is the file open?
        Property Boolean pbFileOpen False
        { Visibility = Private }
        Property Integer piChannel
        { Visibility = Private }
        //Filename including path and extension
        Property String psCompleteFilename
        { Visibility = Private }
        //Current line, read from the file
        Property String psCurrentLine
        { Visibility = Private }
        //Convert to Oem
        Property String pbToOem True
        
    End_Procedure

    //Destructor cleans up if needed: Close file (and release channel).
    Procedure Destroy_Object
        if (pbFileOpen(self)) Send CloseFile
        Forward Send Destroy_Object
    End_Procedure
    
    Import_Class_Protocol cIterator_Mixin
    
    {Visibility=Public}
    Procedure CloseFile
        Close_Input Channel (piChannel(self))
        Send ReleaseChannel
        Set pbFileOpen to False
    End_Procedure
    
    //Opens sequential file for input.
    //@param sFile Full file name including path.
    //@return  True if file can be opened
    {Visibility=Public}
    Function OpenInput String sFile Returns Boolean
        Send IteratorReset
        //Empty file string is not documented to give SEQEOF true, so check this manually.
        If (sFile = "") Function_Return False
        //Abort if unable to assign channel.
        If (not(AssignChannel(self))) Function_Return False
        Direct_Input channel (piChannel(Self)) (ToANSI(sFile))
        //File not found. Abort.
        If (SeqEOF) Begin
            Send ReleaseChannel
            Function_Return False
        End
        //File opened OK!
        Set pbFileOpen to True
        Function_Return True
    End_Function
    
    //Reads next line from file. Updates internal properties. Use CurrentLine
    //to get the value of the line that was read.
    //@Return True if line read OK. False if SeqEOF
    {Visibility=Public}
    Function ReadNextLine Returns Boolean
        String sCurrentLine
        ReadLn Channel (piChannel(self)) sCurrentLine
        If (pbToOem(Self)) Move (ToOem(sCurrentLine)) to sCurrentLine
        If (SeqEOF) Begin
            set psCurrentLine to ""
            Function_Return False
        End
        Else Begin
            Set psCurrentLine to sCurrentLine
            Set piCurrent to (piCurrent(self) + 1)
            Function_Return True
        End
    End_Function
    
    //@Return The value of the line that was read using ReadNextLine
    {Visibility=Public}
    Function CurrentLine Returns String
        Function_Return (psCurrentLine(self))
    End_Function
    
    {Visibility=Public}
    Procedure IteratorReset
        Send IteratorReset_Mixin
        If (pbFileOpen(self)) Set_Channel_Position (piChannel(self)) to 0
    End_Procedure
    
    {Visibility=Public}
    Function IteratorMoveNext Returns Boolean
        Function_Return (ReadNextLine(Self))
    End_Function
    
End_Class
